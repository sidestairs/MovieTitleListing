import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from 'redux/store';
import { fetchCount, fetchMovieList } from './movieListAPI';

export interface MovieObject {
  title: String;
  description: String;
  programType: String;
  images: {
    'Poster Art': {
      url: String;
      width: Number;
      height: Number;
    };
  };
  releaseYear: Number;
}

export interface MovieListState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  entries: MovieObject[];
}

const initialState: MovieListState = {
  value: 0,
  status: 'idle',
  entries: [],
};

export const incrementAsync = createAsyncThunk('movieList/fetchCount', async (amount: number) => {
  const response = await fetchCount(amount);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const fetchMovieListAsync = createAsyncThunk('movieList/fetchMovieList', async () => {
  const response = await fetchMovieList();
  // console.log('fetchMovieListAsync', response);
  return response;
});

export const movieListSlice = createSlice({
  name: 'movieList',
  initialState,
  reducers: {
    setMovieList: (state, action: PayloadAction<MovieObject[]>) => {
      state.entries = action.payload;
    },
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchMovieListAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchMovieListAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // state.value += action.payload;
      })
      .addCase(fetchMovieListAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// Actions
export const { setMovieList, increment, decrement, incrementByAmount } = movieListSlice.actions;

// Selectors
export const selectCount = (state: RootState) => state.movieList.value;
export const selectStatus = (state: RootState) => state.movieList.status;
export const selectMovieEntries = (state: RootState) => state.movieList.entries;

// Reducers
export default movieListSlice.reducer;
